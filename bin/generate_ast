#!/usr/bin/env ruby
# frozen_string_literal: true

def print_usage
  puts 'Usage: generate_ast <output filename>'
end

if ARGV.size != 1
  print_usage
  exit 1
end

BASE_CLASS_NAME = 'Expr'

FILE_HEADER = <<~head
# frozen_string_literal: true

## THIS IS AN AUTOGENERATED FILE--DO NOT EDIT
module Rlox
  class #{BASE_CLASS_NAME}
  end

head

EXPRESSION_DEFS = [
  'Binary   : left_expression, operator_token, right_expression',
  'Grouping : expression',
  'Literal  : literal_value',
  'Unary    : operator_token, right_expression',
]

class ExpressionClassGeneration
  attr_reader :class_name
  attr_reader :instance_vars

  def initialize(class_name, instance_vars)
    @class_name = class_name
    @instance_vars = instance_vars
  end

  def to_s
    <<~EXPRESSION_CLASS_STR
class #{class_name} < #{BASE_CLASS_NAME}
  #{instance_var_attr_string}

  def initialize(#{instance_vars.join(', ')})
#{instance_var_assignment_string}
  end
end
    EXPRESSION_CLASS_STR
  end

  private

  def instance_var_attr_string
    str = instance_vars.map { |i| ":#{i}"}
      .join(', ')
    
    "attr_reader #{str}"
  end

  def instance_var_assignment_string
    instance_vars.map { |i| "    @#{i} = #{i}" }
      .join("\n")
  end
end

File.open(ARGV[0], 'w') do |f|
  f.puts(FILE_HEADER)

  EXPRESSION_DEFS.each do |type|
    class_name = type.split(':')[0].strip
    fields = type.split(':')[1].strip
    instance_names = fields.split(',').map(&:strip)

    f.puts ExpressionClassGeneration.new(class_name, instance_names).to_s
  end

  f.puts('end')
end
