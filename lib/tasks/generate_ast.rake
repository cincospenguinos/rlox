require 'rake'

FILE_HEADER = <<~HEAD
  # frozen_string_literal: true

  ## THIS IS AN AUTOGENERATED FILE--DO NOT EDIT
  module Rlox

HEAD

EXPRESSION_DEFS = [
  "Binary   : left_expression, operator_token, right_expression",
  "Grouping : expression",
  "Literal  : literal_value",
  "Unary    : operator_token, right_expression"
].freeze

STATEMENT_DEFS = [].freeze

## ExprStmtClassGeneration
#
# Creates string of class to print into file, extending base Expression class
class ExprStmtClassGeneration
  attr_accessor :base_class_name, :class_name, :instance_vars

  def initialize(base_class_name, class_name, instance_vars)
    @base_class_name = base_class_name
    @class_name = class_name
    @instance_vars = instance_vars
  end

  def to_s
    <<~EXPRESSION_CLASS_STR
      class #{class_name}#{base_class_name} < #{base_class_name}
        #{instance_var_attr_string}

        def initialize(#{instance_vars.join(", ")})
      #{instance_var_assignment_string}
        end

        def accept(visitor)
          visitor.visit_#{class_name.downcase}_expr(self)
        end
      end
    EXPRESSION_CLASS_STR
  end

  def base_class_str(base_class_name)
    <<~BASE_CLASS_STR
      class #{base_class_name}
      end
    BASE_CLASS_STR
  end

  private

  def instance_var_attr_string
    str = instance_vars.map { |i| ":#{i}" }
                       .join(", ")

    "attr_reader #{str}"
  end

  def instance_var_assignment_string
    instance_vars.map { |i| "    @#{i} = #{i}" }
                 .join("\n")
  end
end

namespace :gen do
  desc "Generates Expr class definitions"
  task :expr do
    File.open("lib/rlox/expression.rb", "w") do |f|
      f.puts(FILE_HEADER)
      gen = ExprStmtClassGeneration.new('Expr', nil, nil)
      f.puts(gen.base_class_str('Expr'))

      EXPRESSION_DEFS.each do |type|
        gen.class_name = type.split(":")[0].strip
        fields = type.split(":")[1].strip
        gen.instance_vars = fields.split(",").map(&:strip)

        f.puts gen.to_s
      end

      f.puts("end")
    end
  end
end
